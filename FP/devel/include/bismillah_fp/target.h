// Generated by gencpp from file bismillah_fp/target.msg
// DO NOT EDIT!


#ifndef BISMILLAH_FP_MESSAGE_TARGET_H
#define BISMILLAH_FP_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bismillah_fp
{
template <class ContainerAllocator>
struct target_
{
  typedef target_<ContainerAllocator> Type;

  target_()
    : center_bola_x(0)
    , center_bola_y(0)
    , target_sudut(0)
    , kecepatan_x(0)
    , kecepatan_y(0)
    , kecepatan_teta(0)  {
    }
  target_(const ContainerAllocator& _alloc)
    : center_bola_x(0)
    , center_bola_y(0)
    , target_sudut(0)
    , kecepatan_x(0)
    , kecepatan_y(0)
    , kecepatan_teta(0)  {
  (void)_alloc;
    }



   typedef int64_t _center_bola_x_type;
  _center_bola_x_type center_bola_x;

   typedef int64_t _center_bola_y_type;
  _center_bola_y_type center_bola_y;

   typedef int64_t _target_sudut_type;
  _target_sudut_type target_sudut;

   typedef int64_t _kecepatan_x_type;
  _kecepatan_x_type kecepatan_x;

   typedef int64_t _kecepatan_y_type;
  _kecepatan_y_type kecepatan_y;

   typedef int64_t _kecepatan_teta_type;
  _kecepatan_teta_type kecepatan_teta;





  typedef boost::shared_ptr< ::bismillah_fp::target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bismillah_fp::target_<ContainerAllocator> const> ConstPtr;

}; // struct target_

typedef ::bismillah_fp::target_<std::allocator<void> > target;

typedef boost::shared_ptr< ::bismillah_fp::target > targetPtr;
typedef boost::shared_ptr< ::bismillah_fp::target const> targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bismillah_fp::target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bismillah_fp::target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bismillah_fp::target_<ContainerAllocator1> & lhs, const ::bismillah_fp::target_<ContainerAllocator2> & rhs)
{
  return lhs.center_bola_x == rhs.center_bola_x &&
    lhs.center_bola_y == rhs.center_bola_y &&
    lhs.target_sudut == rhs.target_sudut &&
    lhs.kecepatan_x == rhs.kecepatan_x &&
    lhs.kecepatan_y == rhs.kecepatan_y &&
    lhs.kecepatan_teta == rhs.kecepatan_teta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bismillah_fp::target_<ContainerAllocator1> & lhs, const ::bismillah_fp::target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bismillah_fp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bismillah_fp::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bismillah_fp::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bismillah_fp::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bismillah_fp::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bismillah_fp::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bismillah_fp::target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bismillah_fp::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72fecc2344924574cece529ec5202e24";
  }

  static const char* value(const ::bismillah_fp::target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72fecc2344924574ULL;
  static const uint64_t static_value2 = 0xcece529ec5202e24ULL;
};

template<class ContainerAllocator>
struct DataType< ::bismillah_fp::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bismillah_fp/target";
  }

  static const char* value(const ::bismillah_fp::target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bismillah_fp::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 center_bola_x\n"
"int64 center_bola_y\n"
"int64 target_sudut\n"
"int64 kecepatan_x\n"
"int64 kecepatan_y\n"
"int64 kecepatan_teta\n"
;
  }

  static const char* value(const ::bismillah_fp::target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bismillah_fp::target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_bola_x);
      stream.next(m.center_bola_y);
      stream.next(m.target_sudut);
      stream.next(m.kecepatan_x);
      stream.next(m.kecepatan_y);
      stream.next(m.kecepatan_teta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bismillah_fp::target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bismillah_fp::target_<ContainerAllocator>& v)
  {
    s << indent << "center_bola_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.center_bola_x);
    s << indent << "center_bola_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.center_bola_y);
    s << indent << "target_sudut: ";
    Printer<int64_t>::stream(s, indent + "  ", v.target_sudut);
    s << indent << "kecepatan_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.kecepatan_x);
    s << indent << "kecepatan_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.kecepatan_y);
    s << indent << "kecepatan_teta: ";
    Printer<int64_t>::stream(s, indent + "  ", v.kecepatan_teta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BISMILLAH_FP_MESSAGE_TARGET_H
