// Generated by gencpp from file dasar_ros/pesan_saya.msg
// DO NOT EDIT!


#ifndef DASAR_ROS_MESSAGE_PESAN_SAYA_H
#define DASAR_ROS_MESSAGE_PESAN_SAYA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dasar_ros
{
template <class ContainerAllocator>
struct pesan_saya_
{
  typedef pesan_saya_<ContainerAllocator> Type;

  pesan_saya_()
    : nama()
    , nrp()
    , ipk(0.0)  {
    }
  pesan_saya_(const ContainerAllocator& _alloc)
    : nama(_alloc)
    , nrp(_alloc)
    , ipk(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _nama_type;
  _nama_type nama;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _nrp_type;
  _nrp_type nrp;

   typedef float _ipk_type;
  _ipk_type ipk;





  typedef boost::shared_ptr< ::dasar_ros::pesan_saya_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dasar_ros::pesan_saya_<ContainerAllocator> const> ConstPtr;

}; // struct pesan_saya_

typedef ::dasar_ros::pesan_saya_<std::allocator<void> > pesan_saya;

typedef boost::shared_ptr< ::dasar_ros::pesan_saya > pesan_sayaPtr;
typedef boost::shared_ptr< ::dasar_ros::pesan_saya const> pesan_sayaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dasar_ros::pesan_saya_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dasar_ros::pesan_saya_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dasar_ros::pesan_saya_<ContainerAllocator1> & lhs, const ::dasar_ros::pesan_saya_<ContainerAllocator2> & rhs)
{
  return lhs.nama == rhs.nama &&
    lhs.nrp == rhs.nrp &&
    lhs.ipk == rhs.ipk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dasar_ros::pesan_saya_<ContainerAllocator1> & lhs, const ::dasar_ros::pesan_saya_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dasar_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dasar_ros::pesan_saya_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dasar_ros::pesan_saya_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dasar_ros::pesan_saya_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dasar_ros::pesan_saya_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dasar_ros::pesan_saya_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dasar_ros::pesan_saya_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dasar_ros::pesan_saya_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42b70ad42e4f827badd05f6f9665ddc7";
  }

  static const char* value(const ::dasar_ros::pesan_saya_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42b70ad42e4f827bULL;
  static const uint64_t static_value2 = 0xadd05f6f9665ddc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dasar_ros::pesan_saya_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dasar_ros/pesan_saya";
  }

  static const char* value(const ::dasar_ros::pesan_saya_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dasar_ros::pesan_saya_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string nama\n"
"string nrp\n"
"float32 ipk\n"
;
  }

  static const char* value(const ::dasar_ros::pesan_saya_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dasar_ros::pesan_saya_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nama);
      stream.next(m.nrp);
      stream.next(m.ipk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pesan_saya_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dasar_ros::pesan_saya_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dasar_ros::pesan_saya_<ContainerAllocator>& v)
  {
    s << indent << "nama: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.nama);
    s << indent << "nrp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.nrp);
    s << indent << "ipk: ";
    Printer<float>::stream(s, indent + "  ", v.ipk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DASAR_ROS_MESSAGE_PESAN_SAYA_H
