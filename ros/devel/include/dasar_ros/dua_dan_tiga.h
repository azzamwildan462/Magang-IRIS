// Generated by gencpp from file dasar_ros/dua_dan_tiga.msg
// DO NOT EDIT!


#ifndef DASAR_ROS_MESSAGE_DUA_DAN_TIGA_H
#define DASAR_ROS_MESSAGE_DUA_DAN_TIGA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dasar_ros
{
template <class ContainerAllocator>
struct dua_dan_tiga_
{
  typedef dua_dan_tiga_<ContainerAllocator> Type;

  dua_dan_tiga_()
    : tanya()
    , jawab()  {
    }
  dua_dan_tiga_(const ContainerAllocator& _alloc)
    : tanya(_alloc)
    , jawab(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tanya_type;
  _tanya_type tanya;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _jawab_type;
  _jawab_type jawab;





  typedef boost::shared_ptr< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> const> ConstPtr;

}; // struct dua_dan_tiga_

typedef ::dasar_ros::dua_dan_tiga_<std::allocator<void> > dua_dan_tiga;

typedef boost::shared_ptr< ::dasar_ros::dua_dan_tiga > dua_dan_tigaPtr;
typedef boost::shared_ptr< ::dasar_ros::dua_dan_tiga const> dua_dan_tigaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dasar_ros::dua_dan_tiga_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dasar_ros::dua_dan_tiga_<ContainerAllocator1> & lhs, const ::dasar_ros::dua_dan_tiga_<ContainerAllocator2> & rhs)
{
  return lhs.tanya == rhs.tanya &&
    lhs.jawab == rhs.jawab;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dasar_ros::dua_dan_tiga_<ContainerAllocator1> & lhs, const ::dasar_ros::dua_dan_tiga_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dasar_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4837604f04448f1d12c0d9b2655a598c";
  }

  static const char* value(const ::dasar_ros::dua_dan_tiga_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4837604f04448f1dULL;
  static const uint64_t static_value2 = 0x12c0d9b2655a598cULL;
};

template<class ContainerAllocator>
struct DataType< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dasar_ros/dua_dan_tiga";
  }

  static const char* value(const ::dasar_ros::dua_dan_tiga_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tanya\n"
"string jawab\n"
;
  }

  static const char* value(const ::dasar_ros::dua_dan_tiga_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tanya);
      stream.next(m.jawab);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dua_dan_tiga_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dasar_ros::dua_dan_tiga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dasar_ros::dua_dan_tiga_<ContainerAllocator>& v)
  {
    s << indent << "tanya: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tanya);
    s << indent << "jawab: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.jawab);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DASAR_ROS_MESSAGE_DUA_DAN_TIGA_H
